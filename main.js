!function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=n}var n,r;return n=t,(r=[{key:"_showInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_toggleButtonState",value:function(){this._getInvalidInput()?(this._button.classList.add(this._inactiveButtonClass),this._button.disabled=!0):(this._button.classList.remove(this._inactiveButtonClass),this._button.disabled=!1)}},{key:"_getInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_setEventListeners",value:function(){var e=this;this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._button=this._formElement.querySelector(this._submitButtonSelector),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){var n=t.data,r=t.handleCardClick,o=t.handleLikeCard,i=t.handleRemoveCard,a=t.cardSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n.name,this._link=n.link,this._cardId=n._id,this._likes=n.likes,this._cardOwner=n.owner._id,this._cardSelector=a,this._handleCardClick=r,this._handleLikeCard=o,this._handleRemoveCard=i,this._cardLiked=!1}var t,r;return t=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".photo-grid__card").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".photo-grid__heart-icon").addEventListener("click",(function(){e._handleLikeCard(e)})),this._element.querySelector(".photo-grid__delete-icon").addEventListener("click",(function(){e._handleRemoveCard({id:e._cardId})})),this._element.querySelector(".photo-grid__image").addEventListener("click",(function(){e._handleCardClick({link:e._link,name:e._name})}))}},{key:"removeCard",value:function(){this._element.remove(),this._element=null}},{key:"_renderLikes",value:function(e){this._element.querySelector(".photo-grid__text").textContent=this._likes.length,this._likes.some((function(t){return t._id===e}))?(this._cardLiked=!0,this._element.querySelector(".photo-grid__heart-icon").classList.add("photo-grid__heart-icon_active")):(this._cardLiked=!1,this._element.querySelector(".photo-grid__heart-icon").classList.remove("photo-grid__heart-icon_active"))}},{key:"updateCount",value:function(e,t){this._likes=e.likes,this._renderLikes(t)}},{key:"generateCard",value:function(e){return this._element=this._getTemplate(),this._setEventListeners(),this._element.querySelector(".photo-grid__image").src=this._link,this._element.querySelector(".photo-grid__image").alt=this._name,this._element.querySelector(".photo-grid__title").textContent=this._name,this._renderLikes(e),this._cardOwner!==e&&(this._element.querySelector(".photo-grid__delete-icon").hidden=!0),this._element}}])&&n(t.prototype,r),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n),this._items=[]}var t,n;return t=e,(n=[{key:"addItem",value:function(e,t){this._container.prepend(e),this._items[t]=e}},{key:"removeItem",value:function(e){var t=this._items[e];t.remove(),t=null,this._items.splice(e)}},{key:"renderItems",value:function(e){e.forEach(this._renderer)}}])&&o(t.prototype,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this.close=this.close.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("click",(function(t){(t.target.classList.contains("popup_type_preview")||t.target.classList.contains("popup__close-button"))&&e.close()}))}}])&&a(t.prototype,n),e}();function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=p(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},l(e,t,n||e)}function f(e,t){return f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},f(e,t)}function h(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=p(r);if(o){var n=p(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return h(this,e)});function a(e){var t,n=e.popupSelector,r=e.formButton,o=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._handleFormSubmit=o,t._formButton=r,t}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;this._popupElement.querySelector(".form").addEventListener("submit",(function(t){t.preventDefault(),e._popupElement.querySelector(".form__button").textContent="Saving...",e._handleFormSubmit(e._getInputValues())})),l(p(a.prototype),"setEventListeners",this).call(this)}},{key:"close",value:function(){this._popupElement.querySelector(".form").reset(),l(p(a.prototype),"close",this).call(this)}},{key:"stopLoading",value:function(){this._popupElement.querySelector(".form__button").textContent=this._formButton}},{key:"_getInputValues",value:function(){var e=this;return this._inputList=this._popupElement.querySelectorAll(".form__input"),this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}}])&&u(t.prototype,n),a}(c);function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t,n){return v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},v(e,t,n||e)}function b(e,t){return b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},b(e,t)}function E(e,t){if(t&&("object"===_(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function S(e){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},S(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(r);if(o){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(){return y(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"open",value:function(e){var t=e.link,n=e.name;this._popupElement.querySelector(".popup__caption").textContent=n;var r=this._popupElement.querySelector(".popup__image");r.src=t,r.alt=n,v(S(a.prototype),"open",this).call(this)}}])&&m(t.prototype,n),a}(c),k=g;function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=function(){function e(t){var n=t.nameSelector,r=t.titleSelector,o=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=document.querySelector(n),this._titleElement=document.querySelector(r),this._avatarElement=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._nameElement.textContent,about:this._titleElement.textContent,avatar:this._avatarElement.src}}},{key:"setUserInfo",value:function(e){this._nameElement.textContent=e.name,this._titleElement.textContent=e.about,this._avatarElement.src=e.avatar}}])&&C(t.prototype,n),e}();function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r,this._handleResponse=this._handleResponse.bind(this)}var t,n;return t=e,(n=[{key:"_handleResponse",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"cards"),{headers:this._headers}).then(this._handleResponse)}},{key:"addCard",value:function(e){return fetch("".concat(this._baseUrl,"cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then(this._handleResponse)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"cards/").concat(e),{headers:this._headers,method:"DELETE",body:JSON.stringify({_id:e})}).then(this._handleResponse)}},{key:"addLike",value:function(e){return fetch("".concat(this._baseUrl,"cards/likes/").concat(e),{headers:this._headers,method:"PUT",body:JSON.stringify({_id:e})}).then(this._handleResponse)}},{key:"deleteLike",value:function(e){return fetch("".concat(this._baseUrl,"cards/likes/").concat(e),{headers:this._headers,method:"DELETE",body:JSON.stringify({_id:e})}).then(this._handleResponse)}},{key:"getUser",value:function(){return fetch("".concat(this._baseUrl,"users/me"),{headers:this._headers}).then(this._handleResponse)}},{key:"setUser",value:function(e,t,n){return fetch("".concat(this._baseUrl,"users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:t,avatar:n})}).then(this._handleResponse)}},{key:"getAvatar",value:function(){return fetch("".concat(this._baseUrl,"users/me/avatar"),{headers:this._headers,method:"GET"}).then(this._handleResponse)}},{key:"setAvatar",value:function(e){return fetch("".concat(this._baseUrl,"users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then(this._handleResponse)}}])&&L(t.prototype,n),e}(),q=document.querySelector(".popup_type_edit"),R=document.querySelector(".popup_type_add"),j=document.querySelector(".popup_type_avatar"),I=q.querySelector(".form"),P=R.querySelector(".form"),B=j.querySelector(".form"),T=document.querySelector(".profile__edit-button"),x=document.querySelector(".profile__add-button"),U=document.querySelector(".profile__avatar-button"),V=document.querySelector(".profile__image"),A=document.querySelector(".profile__name"),D=document.querySelector(".profile__title");function F(e){e._popupElement.querySelector(".form__button").classList.add("form__button_disabled")}var N=new O({baseUrl:"https://around.nomoreparties.co/v1/group-11/",headers:{authorization:"ce0cfad9-c022-44c4-8673-897f4eaf9eed","Content-Type":"application/json"}});Promise.all([N.getUser(),N.getInitialCards()]).then((function(e){e[1].sort((function(e,t){return new Date(e.createdAt)-new Date(t.createdAt)}));var t=new i({renderer:function(e){n(e)}},".photo-grid");function n(n){var o=new r({data:n,handleCardClick:function(e){H.open(e)},handleLikeCard:function(t){t._cardLiked?N.deleteLike(t._cardId).then((function(n){t.updateCount(n,e[0]._id)})).catch((function(e){return console.log("Error: ".concat(e))})):N.addLike(t._cardId).then((function(n){t.updateCount(n,e[0]._id)})).catch((function(e){return console.log("Error: ".concat(e))}))},handleRemoveCard:function(e){var t;t=e.id,c._popupElement.querySelector(".form__input_type_card-id").value=t,c.open()},cardSelector:".card-template"}),i=o.generateCard(e[0]._id);t.addItem(i,o._cardId)}t.renderItems(e[1]),new w({nameSelector:".profile__name",titleSelector:".profile__title",avatarSelector:".profile__image"}).setUserInfo(e[0]);var o=new d({popupSelector:".popup_type_add",formButton:"Create",handleFormSubmit:function(e){var t={name:e.name,link:e.link};N.addCard(t).then((function(e){n(e),o.close()})).catch((function(e){return console.log("Error: ".concat(e))})).finally((function(){o.stopLoading()}))}});o.setEventListeners(),x.addEventListener("click",(function(){F(o),o.open()}));var a=new d({popupSelector:".popup_type_edit",formButton:"Save",handleFormSubmit:function(e){var t=e.name,n=e.about;N.setUser(t,n).then((function(e){A.textContent=t,D.textContent=n,a.close()})).catch((function(e){return console.log("Error: ".concat(e))})).finally((function(){a.stopLoading()}))}});a.setEventListeners(),T.addEventListener("click",(function(){var e,t;e=A.textContent,t=D.textContent,a._popupElement.querySelector(".form__input_type_name").value=e,a._popupElement.querySelector(".form__input_type_title").value=t,a.open()}));var c=new d({popupSelector:".popup_type_delete",formButton:"Yes",handleFormSubmit:function(e){N.deleteCard(e.id).then((function(n){t.removeItem(e.id),c.close()})).catch((function(e){return console.log("Error: ".concat(e))})).finally((function(){c.stopLoading()}))}});c.setEventListeners()})).catch((function(e){return console.log("Error: ".concat(e))}));var J=new d({popupSelector:".popup_type_avatar",formButton:"Save",handleFormSubmit:function(e){var t=e.avatarLink;N.setAvatar(t).then((function(e){V.src=t,J.close()})).catch((function(e){return console.log("Error: ".concat(e))})).finally((function(){J.stopLoading()}))}});J.setEventListeners(),U.addEventListener("click",(function(){J.open(),F(J)}));var H=new k(".popup_type_preview");H.setEventListeners();var z={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"};new t(z,P).enableValidation(),new t(z,I).enableValidation(),new t(z,B).enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,